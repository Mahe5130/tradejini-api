# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.scrip_info import ScripInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SipOrderRecord(BaseModel):
    """
    SipOrderRecord
    """ # noqa: E501
    sip_name: Optional[StrictStr] = Field(default=None, alias="sipName")
    status: Optional[StrictStr] = None
    sip_type: StrictStr = Field(alias="sipType")
    modify_start_date: Optional[StrictBool] = Field(default=None, description="'modifyStartDate' flag will be false if modification of start date is disabled", alias="modifyStartDate")
    registered_date: Optional[StrictStr] = Field(default=None, alias="registeredDate")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate")
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate")
    last_executed_date: Optional[StrictStr] = Field(default=None, alias="lastExecutedDate")
    execution_date: Optional[StrictStr] = Field(default=None, alias="executionDate")
    sip_id: Optional[StrictStr] = Field(default=None, alias="sipId")
    pending_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End period", alias="pendingPeriod")
    period: Optional[Union[StrictFloat, StrictInt]] = None
    executed_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="executedPeriod")
    schedule_desc: Optional[StrictStr] = Field(default=None, alias="scheduleDesc")
    symbols: Optional[List[ScripInfo]] = None
    __properties: ClassVar[List[str]] = ["sipName", "status", "sipType", "modifyStartDate", "registeredDate", "startDate", "dueDate", "lastExecutedDate", "executionDate", "sipId", "pendingPeriod", "period", "executedPeriod", "scheduleDesc", "symbols"]

    @field_validator('sip_type')
    def sip_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('daily', 'weekly', 'fortnightly', 'monthly'):
            raise ValueError("must be one of enum values ('daily', 'weekly', 'fortnightly', 'monthly')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SipOrderRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in symbols (list)
        _items = []
        if self.symbols:
            for _item in self.symbols:
                if _item:
                    _items.append(_item.to_dict())
            _dict['symbols'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SipOrderRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sipName": obj.get("sipName"),
            "status": obj.get("status"),
            "sipType": obj.get("sipType"),
            "modifyStartDate": obj.get("modifyStartDate"),
            "registeredDate": obj.get("registeredDate"),
            "startDate": obj.get("startDate"),
            "dueDate": obj.get("dueDate"),
            "lastExecutedDate": obj.get("lastExecutedDate"),
            "executionDate": obj.get("executionDate"),
            "sipId": obj.get("sipId"),
            "pendingPeriod": obj.get("pendingPeriod"),
            "period": obj.get("period"),
            "executedPeriod": obj.get("executedPeriod"),
            "scheduleDesc": obj.get("scheduleDesc"),
            "symbols": [ScripInfo.from_dict(_item) for _item in obj.get("symbols")] if obj.get("symbols") is not None else None
        })
        return _obj


