# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.trade_record_sym import TradeRecordSym
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OrderRecord(BaseModel):
    """
    OrderRecord
    """ # noqa: E501
    sym_id: Optional[StrictStr] = Field(default=None, alias="symId")
    status: Optional[StrictStr] = None
    qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Order quantity")
    side: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    validity: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    limit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="limitPrice")
    exch_order_id: Optional[StrictStr] = Field(default=None, alias="exchOrderId")
    disc_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discQty")
    product: Optional[StrictStr] = None
    exch_time: Optional[StrictStr] = Field(default=None, description="Exchange order time in the format 'dd-MM-yyyy HH:mm:ss'", alias="exchTime")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    order_time: Optional[StrictStr] = Field(default=None, description="Order time in the format 'dd-MM-yyyy HH:mm:ss'", alias="orderTime")
    avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgPrice")
    amo: Optional[StrictBool] = None
    fill_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fillQty")
    trig_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is required only for stoploss limit and stoploss market orders", alias="trigPrice")
    reason: Optional[StrictStr] = None
    pending_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="pendingQty")
    sym: Optional[TradeRecordSym] = None
    mkt_prot: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mktProt")
    stop_trig_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Stop loss leg order trigger price.", alias="stopTrigPrice")
    target_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Target order or Profit order price", alias="targetPrice")
    trailing_stop_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Trailing stop loss price.", alias="trailingStopPrice")
    remarks: Optional[StrictStr] = Field(default=None, description="Remarks added while placing an order.")
    leg_type: Optional[StrictStr] = Field(default=None, description="Leg Type. Applicable only for Cover and Bracket order.", alias="legType")
    main_leg_order_id: Optional[StrictStr] = Field(default=None, description="Main leg order id. Applicable only for Bracket and Cover order. It is used to exit the order.", alias="mainLegOrderId")
    order_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="orderValue")
    trade_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="'tradeValue' is filled quantity * average price", alias="tradeValue")
    alg_type: Optional[StrictStr] = Field(default=None, description="Algo type 'trailing' or 'regular' ", alias="algType")
    modifiable: Optional[StrictBool] = None
    cancellable: Optional[StrictBool] = None
    exitable: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["symId", "status", "qty", "side", "type", "validity", "source", "limitPrice", "exchOrderId", "discQty", "product", "exchTime", "orderId", "orderTime", "avgPrice", "amo", "fillQty", "trigPrice", "reason", "pendingQty", "sym", "mktProt", "stopTrigPrice", "targetPrice", "trailingStopPrice", "remarks", "legType", "mainLegOrderId", "orderValue", "tradeValue", "algType", "modifiable", "cancellable", "exitable"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('open', 'completed', 'rejected', 'cancelled'):
            raise ValueError("must be one of enum values ('open', 'completed', 'rejected', 'cancelled')")
        return value

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('buy', 'sell'):
            raise ValueError("must be one of enum values ('buy', 'sell')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('limit', 'market', 'stoplimit', 'stopmarket'):
            raise ValueError("must be one of enum values ('limit', 'market', 'stoplimit', 'stopmarket')")
        return value

    @field_validator('validity')
    def validity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('day', 'ioc', 'eos', 'gtc'):
            raise ValueError("must be one of enum values ('day', 'ioc', 'eos', 'gtc')")
        return value

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('delivery', 'normal', 'intraday', 'cover', 'bracket'):
            raise ValueError("must be one of enum values ('delivery', 'normal', 'intraday', 'cover', 'bracket')")
        return value

    @field_validator('leg_type')
    def leg_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('main', 'stoploss', 'target'):
            raise ValueError("must be one of enum values ('main', 'stoploss', 'target')")
        return value

    @field_validator('alg_type')
    def alg_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('trailing', 'regular'):
            raise ValueError("must be one of enum values ('trailing', 'regular')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OrderRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sym
        if self.sym:
            _dict['sym'] = self.sym.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OrderRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symId": obj.get("symId"),
            "status": obj.get("status"),
            "qty": obj.get("qty"),
            "side": obj.get("side"),
            "type": obj.get("type"),
            "validity": obj.get("validity"),
            "source": obj.get("source"),
            "limitPrice": obj.get("limitPrice"),
            "exchOrderId": obj.get("exchOrderId"),
            "discQty": obj.get("discQty"),
            "product": obj.get("product"),
            "exchTime": obj.get("exchTime"),
            "orderId": obj.get("orderId"),
            "orderTime": obj.get("orderTime"),
            "avgPrice": obj.get("avgPrice"),
            "amo": obj.get("amo"),
            "fillQty": obj.get("fillQty"),
            "trigPrice": obj.get("trigPrice"),
            "reason": obj.get("reason"),
            "pendingQty": obj.get("pendingQty"),
            "sym": TradeRecordSym.from_dict(obj.get("sym")) if obj.get("sym") is not None else None,
            "mktProt": obj.get("mktProt"),
            "stopTrigPrice": obj.get("stopTrigPrice"),
            "targetPrice": obj.get("targetPrice"),
            "trailingStopPrice": obj.get("trailingStopPrice"),
            "remarks": obj.get("remarks"),
            "legType": obj.get("legType"),
            "mainLegOrderId": obj.get("mainLegOrderId"),
            "orderValue": obj.get("orderValue"),
            "tradeValue": obj.get("tradeValue"),
            "algType": obj.get("algType"),
            "modifiable": obj.get("modifiable"),
            "cancellable": obj.get("cancellable"),
            "exitable": obj.get("exitable")
        })
        return _obj


