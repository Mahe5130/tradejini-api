# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.place_order_params_data import PlaceOrderParamsData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PendingGTTOrderData(BaseModel):
    """
    PendingGTTOrderData
    """ # noqa: E501
    sym_id: Optional[StrictStr] = Field(default=None, alias="symId")
    exchange: Optional[StrictStr] = None
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    side: Optional[StrictStr] = None
    trigger_type: Optional[StrictStr] = Field(default=None, alias="triggerType")
    single: Optional[PlaceOrderParamsData] = None
    stop_loss: Optional[PlaceOrderParamsData] = Field(default=None, alias="stopLoss")
    target: Optional[PlaceOrderParamsData] = None
    __properties: ClassVar[List[str]] = ["symId", "exchange", "orderId", "side", "triggerType", "single", "stopLoss", "target"]

    @field_validator('trigger_type')
    def trigger_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Single', 'OCO'):
            raise ValueError("must be one of enum values ('Single', 'OCO')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PendingGTTOrderData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of single
        if self.single:
            _dict['single'] = self.single.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_loss
        if self.stop_loss:
            _dict['stopLoss'] = self.stop_loss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PendingGTTOrderData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symId": obj.get("symId"),
            "exchange": obj.get("exchange"),
            "orderId": obj.get("orderId"),
            "side": obj.get("side"),
            "triggerType": obj.get("triggerType"),
            "single": PlaceOrderParamsData.from_dict(obj.get("single")) if obj.get("single") is not None else None,
            "stopLoss": PlaceOrderParamsData.from_dict(obj.get("stopLoss")) if obj.get("stopLoss") is not None else None,
            "target": PlaceOrderParamsData.from_dict(obj.get("target")) if obj.get("target") is not None else None
        })
        return _obj


