# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr, field_validator

from openapi_client.models.access_token import AccessToken

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AuthorizationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def authorize(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Authorize

        Authorize to get oAuth code. </br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': "OauthError",
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def authorize_with_http_info(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Authorize

        Authorize to get oAuth code. </br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': "OauthError",
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def authorize_without_preload_content(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Authorize

        Authorize to get oAuth code. </br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': "OauthError",
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _authorize_serialize(
        self,
        client_id,
        redirect_uri,
        response_type,
        scope,
        state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if client_id is not None:
            
            _query_params.append(('client_id', client_id))
            
        if redirect_uri is not None:
            
            _query_params.append(('redirect_uri', redirect_uri))
            
        if response_type is not None:
            
            _query_params.append(('response_type', response_type))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-gw/oauth/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_access_token(
        self,
        code: Annotated[StrictStr, Field(description="This field value will be same as code received in the final redirection callback.")],
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated.")],
        client_secret: Annotated[StrictStr, Field(description="This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated.")],
        grant_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\\\"authorization_code\\\"__")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccessToken:
        """Access token

        This service is used to get access token from the code which is received from final redirection call back.

        :param code: This field value will be same as code received in the final redirection callback. (required)
        :type code: str
        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type redirect_uri: str
        :param client_secret: This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated. (required)
        :type client_secret: str
        :param grant_type: As per oAuth specification this value should be __\\\"authorization_code\\\"__ (required)
        :type grant_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_access_token_serialize(
            code=code,
            client_id=client_id,
            redirect_uri=redirect_uri,
            client_secret=client_secret,
            grant_type=grant_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_access_token_with_http_info(
        self,
        code: Annotated[StrictStr, Field(description="This field value will be same as code received in the final redirection callback.")],
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated.")],
        client_secret: Annotated[StrictStr, Field(description="This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated.")],
        grant_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\\\"authorization_code\\\"__")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccessToken]:
        """Access token

        This service is used to get access token from the code which is received from final redirection call back.

        :param code: This field value will be same as code received in the final redirection callback. (required)
        :type code: str
        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type redirect_uri: str
        :param client_secret: This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated. (required)
        :type client_secret: str
        :param grant_type: As per oAuth specification this value should be __\\\"authorization_code\\\"__ (required)
        :type grant_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_access_token_serialize(
            code=code,
            client_id=client_id,
            redirect_uri=redirect_uri,
            client_secret=client_secret,
            grant_type=grant_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_access_token_without_preload_content(
        self,
        code: Annotated[StrictStr, Field(description="This field value will be same as code received in the final redirection callback.")],
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated.")],
        client_secret: Annotated[StrictStr, Field(description="This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated.")],
        grant_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\\\"authorization_code\\\"__")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Access token

        This service is used to get access token from the code which is received from final redirection call back.

        :param code: This field value will be same as code received in the final redirection callback. (required)
        :type code: str
        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper access token will not be generated. (required)
        :type redirect_uri: str
        :param client_secret: This field value should be the API secret provided at the app registration. If the value is improper access token will not be generated. (required)
        :type client_secret: str
        :param grant_type: As per oAuth specification this value should be __\\\"authorization_code\\\"__ (required)
        :type grant_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_access_token_serialize(
            code=code,
            client_id=client_id,
            redirect_uri=redirect_uri,
            client_secret=client_secret,
            grant_type=grant_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_access_token_serialize(
        self,
        code,
        client_id,
        redirect_uri,
        client_secret,
        grant_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if code is not None:
            _form_params.append(('code', code))
        if client_id is not None:
            _form_params.append(('client_id', client_id))
        if redirect_uri is not None:
            _form_params.append(('redirect_uri', redirect_uri))
        if client_secret is not None:
            _form_params.append(('client_secret', client_secret))
        if grant_type is not None:
            _form_params.append(('grant_type', grant_type))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api-gw/oauth/token',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def order_authorize(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        params: Annotated[StrictStr, Field(description="This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Order Connect [Offsite Orders]

        Authorize to place orders and get oAuth Code to the redirect url at once.</br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param params: This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\" (required)
        :type params: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            params=params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': None,
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def order_authorize_with_http_info(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        params: Annotated[StrictStr, Field(description="This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Order Connect [Offsite Orders]

        Authorize to place orders and get oAuth Code to the redirect url at once.</br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param params: This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\" (required)
        :type params: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            params=params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': None,
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def order_authorize_without_preload_content(
        self,
        client_id: Annotated[StrictStr, Field(description="This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        redirect_uri: Annotated[StrictStr, Field(description="This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed.")],
        response_type: Annotated[StrictStr, Field(description="As per oAuth specification this value should be __\"code\"__")],
        scope: Annotated[StrictStr, Field(description="This field value should be __\"general\"__.")],
        state: Annotated[StrictStr, Field(description="A literal string that will be return in the final redirection callback.")],
        params: Annotated[StrictStr, Field(description="This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Order Connect [Offsite Orders]

        Authorize to place orders and get oAuth Code to the redirect url at once.</br><span style='color:red'>This API cannot be test from this API document since it is been redirected.</span>

        :param client_id: This field value should be the API key mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type client_id: str
        :param redirect_uri: This field value should be the redirect url mentioned in the registered app. If the value is improper authorization will not be allowed. (required)
        :type redirect_uri: str
        :param response_type: As per oAuth specification this value should be __\"code\"__ (required)
        :type response_type: str
        :param scope: This field value should be __\"general\"__. (required)
        :type scope: str
        :param state: A literal string that will be return in the final redirection callback. (required)
        :type state: str
        :param params: This field value should be the params required to place orders in json array format and get oAuth Code. </br><span style='color:red'>Each array value should match any of examples provided. Else your authorization will be failed.</span></br> Example :```[{\"exch\":\"NSE\",\"symbol\":\"ACC\",\"series\":\"EQ\",\"inst\":\"EQT\",\"qty\":10,\"side\":\"buy\",\"type\":\"limit\",\"product\":\"intraday\",\"limitPrice\":2700.55,\"validity\":\"day\"},{\"exch\":\"NFO\",\"symbol\":\"NIFTY\",\"expiry\":\"2022-11-24\",\"inst\":\"FUTIDX\",\"qty\":2000,\"side\":\"sell\",\"type\":\"market\",\"product\":\"intraday\",\"limitPrice\":0,\"validity\":\"ioc\",\"discQty\":500},{\"exch\":\"NFO\",\"symbol\":\"BANKNIFTY\",\"expiry\":\"2022-11-24\",\"optType\":\"PE\",\"inst\":\"OPTIDX\",\"strike\":\"34000\",\"qty\":1500,\"side\":\"buy\",\"type\":\"market\",\"product\":\"delivery\",\"limitPrice\":0,\"validity\":\"day\",\"mktProt\":5}]```</br> For equity symbol instrument must be \"EQT\" (required)
        :type params: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._order_authorize_serialize(
            client_id=client_id,
            redirect_uri=redirect_uri,
            response_type=response_type,
            scope=scope,
            state=state,
            params=params,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '302': None,
            '400': None,
            '401': "OauthError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _order_authorize_serialize(
        self,
        client_id,
        redirect_uri,
        response_type,
        scope,
        state,
        params,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if client_id is not None:
            
            _query_params.append(('client_id', client_id))
            
        if redirect_uri is not None:
            
            _query_params.append(('redirect_uri', redirect_uri))
            
        if response_type is not None:
            
            _query_params.append(('response_type', response_type))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if params is not None:
            
            _query_params.append(('params', params))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-gw/oauth/order-connect',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def updated_individual_token(
        self,
        authorization: Annotated[StrictStr, Field(description="The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal.")],
        password: StrictStr,
        two_fa: Annotated[StrictStr, Field(description="**DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.**")],
        two_fa_typ: Annotated[StrictStr, Field(description="**Enter the type of twoFa based on your twoFa field input.**")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccessToken:
        """Individual Token service

        This service is an updated version with 2Fa login flow.</br>This service is used to get access token for the individual app registration in the developer portal.</br>Using this api direct login is possible from any programming language

        :param authorization: The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal. (required)
        :type authorization: str
        :param password: (required)
        :type password: str
        :param two_fa: **DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.** (required)
        :type two_fa: str
        :param two_fa_typ: **Enter the type of twoFa based on your twoFa field input.** (required)
        :type two_fa_typ: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updated_individual_token_serialize(
            authorization=authorization,
            password=password,
            two_fa=two_fa,
            two_fa_typ=two_fa_typ,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
            '401': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def updated_individual_token_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal.")],
        password: StrictStr,
        two_fa: Annotated[StrictStr, Field(description="**DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.**")],
        two_fa_typ: Annotated[StrictStr, Field(description="**Enter the type of twoFa based on your twoFa field input.**")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccessToken]:
        """Individual Token service

        This service is an updated version with 2Fa login flow.</br>This service is used to get access token for the individual app registration in the developer portal.</br>Using this api direct login is possible from any programming language

        :param authorization: The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal. (required)
        :type authorization: str
        :param password: (required)
        :type password: str
        :param two_fa: **DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.** (required)
        :type two_fa: str
        :param two_fa_typ: **Enter the type of twoFa based on your twoFa field input.** (required)
        :type two_fa_typ: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updated_individual_token_serialize(
            authorization=authorization,
            password=password,
            two_fa=two_fa,
            two_fa_typ=two_fa_typ,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
            '401': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def updated_individual_token_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal.")],
        password: StrictStr,
        two_fa: Annotated[StrictStr, Field(description="**DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.**")],
        two_fa_typ: Annotated[StrictStr, Field(description="**Enter the type of twoFa based on your twoFa field input.**")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Individual Token service

        This service is an updated version with 2Fa login flow.</br>This service is used to get access token for the individual app registration in the developer portal.</br>Using this api direct login is possible from any programming language

        :param authorization: The value should be in the following format :</br>Bearer clientID</br>*ClientID refers to API key in developer portal. (required)
        :type authorization: str
        :param password: (required)
        :type password: str
        :param two_fa: **DOB or PAN will not be accepted as 2FA from 30th September 2022 as per exchange regulations. OTP or Time based OTP should be passed for this field. To get the OTP for your client code, login into the web app <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and in the 2FA page, click 'Having trouble with AppCode/TOTP' to see 'Send SMS / Email OTP' option to generate OTP.**  **For Time based OTP, login into this <a href='https://cubeplus.tradejini.com/' target='_blank' >link</a> and set up the Authenticator app to generate time based OTP by scanning the QR code provided under the Settings section.** (required)
        :type two_fa: str
        :param two_fa_typ: **Enter the type of twoFa based on your twoFa field input.** (required)
        :type two_fa_typ: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updated_individual_token_serialize(
            authorization=authorization,
            password=password,
            two_fa=two_fa,
            two_fa_typ=two_fa_typ,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessToken",
            '401': "AccessToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _updated_individual_token_serialize(
        self,
        authorization,
        password,
        two_fa,
        two_fa_typ,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        if password is not None:
            _form_params.append(('password', password))
        if two_fa is not None:
            _form_params.append(('twoFa', two_fa))
        if two_fa_typ is not None:
            _form_params.append(('twoFaTyp', two_fa_typ))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api-gw/oauth/individual-token-v2',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


