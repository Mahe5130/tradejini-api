# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SymbolStoreJson(BaseModel):
    """
    SymbolStoreJson
    """ # noqa: E501
    id: Optional[StrictStr] = None
    isin: Optional[StrictStr] = None
    disp_name: Optional[StrictStr] = Field(default=None, alias="dispName")
    desc: Optional[StrictStr] = None
    exc_token: Optional[StrictStr] = Field(default=None, alias="excToken")
    lot: Optional[StrictStr] = None
    tick: Optional[StrictStr] = None
    expiry: Optional[StrictStr] = None
    strike: Optional[StrictStr] = None
    opt_type: Optional[StrictStr] = Field(default=None, alias="optType")
    weekly: Optional[StrictStr] = None
    asset: Optional[StrictStr] = None
    instrument: Optional[StrictStr] = None
    symbol: Optional[StrictStr] = None
    series: Optional[StrictStr] = None
    exchange: Optional[StrictStr] = None
    freeze_qty: Optional[StrictStr] = Field(default=None, alias="freezeQty")
    und_id: Optional[StrictStr] = Field(default=None, alias="undId")
    trd_unit: Optional[StrictStr] = Field(default=None, alias="trdUnit")
    lot_multi: Optional[StrictStr] = Field(default=None, alias="lotMulti")
    __properties: ClassVar[List[str]] = ["id", "isin", "dispName", "desc", "excToken", "lot", "tick", "expiry", "strike", "optType", "weekly", "asset", "instrument", "symbol", "series", "exchange", "freezeQty", "undId", "trdUnit", "lotMulti"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SymbolStoreJson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SymbolStoreJson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isin": obj.get("isin"),
            "dispName": obj.get("dispName"),
            "desc": obj.get("desc"),
            "excToken": obj.get("excToken"),
            "lot": obj.get("lot"),
            "tick": obj.get("tick"),
            "expiry": obj.get("expiry"),
            "strike": obj.get("strike"),
            "optType": obj.get("optType"),
            "weekly": obj.get("weekly"),
            "asset": obj.get("asset"),
            "instrument": obj.get("instrument"),
            "symbol": obj.get("symbol"),
            "series": obj.get("series"),
            "exchange": obj.get("exchange"),
            "freezeQty": obj.get("freezeQty"),
            "undId": obj.get("undId"),
            "trdUnit": obj.get("trdUnit"),
            "lotMulti": obj.get("lotMulti")
        })
        return _obj


