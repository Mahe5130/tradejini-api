# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.day_position import DayPosition
from openapi_client.models.trade_record_sym import TradeRecordSym
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PositionRecord(BaseModel):
    """
    PositionRecord
    """ # noqa: E501
    sym_id: Optional[StrictStr] = Field(default=None, alias="symId")
    product: Optional[StrictStr] = None
    buy_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyQty")
    buy_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyValue")
    buy_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyAvgPrice")
    sell_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sellQty")
    sell_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sellValue")
    sell_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="sellAvgPrice")
    cf_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Carry forward positions quantity", alias="cfQty")
    cf_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Carry forward position value and it is calculated using cfQty * cfAvgPrice * multiplier * pricefactor.", alias="cfValue")
    cf_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The settlement price of the scrip from the last trading day, is used to calculate the mark-to-market (MTM) of the positions", alias="cfAvgPrice")
    net_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="netQty")
    net_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net average price is based on today's positions and carryforward positions. For carryforward positions, the average would be the settlement price from the last trading day (cfavgprice), while for today's positions, the average would be the day average price (dayavgprice)", alias="netAvgPrice")
    net_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net value of the position based on the net average price (netavgprice)", alias="netValue")
    realized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Realized pnl value", alias="realizedPnl")
    price_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used for pnl calculations. PriceFactor:(General Numerator * Price Numerator)/(General Denominator * Price Denopminator)", alias="priceFactor")
    multiplier: Optional[Union[StrictFloat, StrictInt]] = None
    sym: Optional[TradeRecordSym] = None
    cf_org_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The actual buy/sell price of the position, is used to calculate the overall PNL of the positions.", alias="cfOrgAvgPrice")
    cf_org_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Carry forward position original value and it is calculated using cfQty * cfOrgAvgPrice * multiplier * pricefactor", alias="cfOrgValue")
    net_org_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net original average price is based on today's positions and carryforward positions. For carryforward positions, the average would be the actual buy or sell price of the scrip, while for today's positions, the average would be the day average price (dayavgprice)", alias="netOrgAvgPrice")
    net_org_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net original value of the position based on the net original average price (netorgavgprice)", alias="netOrgValue")
    realized_org_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="realizedOrgPnl")
    day_pos: Optional[DayPosition] = Field(default=None, alias="dayPos")
    convert_pos: Optional[StrictBool] = Field(default=None, alias="convertPos")
    net_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="netPremium")
    trans_history: Optional[StrictBool] = Field(default=None, alias="transHistory")
    create_tsl: Optional[StrictBool] = Field(default=None, alias="createTSL")
    __properties: ClassVar[List[str]] = ["symId", "product", "buyQty", "buyValue", "buyAvgPrice", "sellQty", "sellValue", "sellAvgPrice", "cfQty", "cfValue", "cfAvgPrice", "netQty", "netAvgPrice", "netValue", "realizedPnl", "priceFactor", "multiplier", "sym", "cfOrgAvgPrice", "cfOrgValue", "netOrgAvgPrice", "netOrgValue", "realizedOrgPnl", "dayPos", "convertPos", "netPremium", "transHistory", "createTSL"]

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('delivery', 'normal', 'intraday', 'cover', 'bracket'):
            raise ValueError("must be one of enum values ('delivery', 'normal', 'intraday', 'cover', 'bracket')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PositionRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sym
        if self.sym:
            _dict['sym'] = self.sym.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_pos
        if self.day_pos:
            _dict['dayPos'] = self.day_pos.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PositionRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symId": obj.get("symId"),
            "product": obj.get("product"),
            "buyQty": obj.get("buyQty"),
            "buyValue": obj.get("buyValue"),
            "buyAvgPrice": obj.get("buyAvgPrice"),
            "sellQty": obj.get("sellQty"),
            "sellValue": obj.get("sellValue"),
            "sellAvgPrice": obj.get("sellAvgPrice"),
            "cfQty": obj.get("cfQty"),
            "cfValue": obj.get("cfValue"),
            "cfAvgPrice": obj.get("cfAvgPrice"),
            "netQty": obj.get("netQty"),
            "netAvgPrice": obj.get("netAvgPrice"),
            "netValue": obj.get("netValue"),
            "realizedPnl": obj.get("realizedPnl"),
            "priceFactor": obj.get("priceFactor"),
            "multiplier": obj.get("multiplier"),
            "sym": TradeRecordSym.from_dict(obj.get("sym")) if obj.get("sym") is not None else None,
            "cfOrgAvgPrice": obj.get("cfOrgAvgPrice"),
            "cfOrgValue": obj.get("cfOrgValue"),
            "netOrgAvgPrice": obj.get("netOrgAvgPrice"),
            "netOrgValue": obj.get("netOrgValue"),
            "realizedOrgPnl": obj.get("realizedOrgPnl"),
            "dayPos": DayPosition.from_dict(obj.get("dayPos")) if obj.get("dayPos") is not None else None,
            "convertPos": obj.get("convertPos"),
            "netPremium": obj.get("netPremium"),
            "transHistory": obj.get("transHistory"),
            "createTSL": obj.get("createTSL")
        })
        return _obj


