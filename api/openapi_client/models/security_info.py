# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SecurityInfo(BaseModel):
    """
    SecurityInfo
    """ # noqa: E501
    symbol: Optional[StrictStr] = None
    segment: Optional[StrictStr] = None
    expiry: Optional[StrictStr] = None
    instrument: Optional[StrictStr] = None
    tick_size: Optional[StrictStr] = Field(default=None, alias="tickSize")
    lot_size: Optional[StrictStr] = Field(default=None, alias="lotSize")
    multiplier: Optional[StrictStr] = None
    gn_gd_bypn_pd: Optional[StrictStr] = Field(default=None, alias="gnGdBypnPd")
    price_unit: Optional[StrictStr] = Field(default=None, alias="priceUnit")
    price_quote_qty: Optional[StrictStr] = Field(default=None, alias="priceQuoteQty")
    trade_unit: Optional[StrictStr] = Field(default=None, alias="tradeUnit")
    delivery_unit: Optional[StrictStr] = Field(default=None, alias="deliveryUnit")
    freeze_qty: Optional[StrictStr] = Field(default=None, alias="freezeQty")
    additional_long_mgn: Optional[StrictStr] = Field(default=None, alias="additionalLongMgn")
    additional_short_mgn: Optional[StrictStr] = Field(default=None, alias="additionalShortMgn")
    exercise_start_date: Optional[StrictStr] = Field(default=None, alias="exerciseStartDate")
    exercise_end_date: Optional[StrictStr] = Field(default=None, alias="exerciseEndDate")
    tender_start_date: Optional[StrictStr] = Field(default=None, alias="tenderStartDate")
    tender_end_date: Optional[StrictStr] = Field(default=None, alias="tenderEndDate")
    elm_buy_mgn: Optional[StrictStr] = Field(default=None, alias="elmBuyMgn")
    elm_start_mgn: Optional[StrictStr] = Field(default=None, alias="elmStartMgn")
    special_long_mgn: Optional[StrictStr] = Field(default=None, alias="specialLongMgn")
    special_short_mgn: Optional[StrictStr] = Field(default=None, alias="specialShortMgn")
    contract_token: Optional[StrictStr] = Field(default=None, alias="contractToken")
    __properties: ClassVar[List[str]] = ["symbol", "segment", "expiry", "instrument", "tickSize", "lotSize", "multiplier", "gnGdBypnPd", "priceUnit", "priceQuoteQty", "tradeUnit", "deliveryUnit", "freezeQty", "additionalLongMgn", "additionalShortMgn", "exerciseStartDate", "exerciseEndDate", "tenderStartDate", "tenderEndDate", "elmBuyMgn", "elmStartMgn", "specialLongMgn", "specialShortMgn", "contractToken"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SecurityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SecurityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "segment": obj.get("segment"),
            "expiry": obj.get("expiry"),
            "instrument": obj.get("instrument"),
            "tickSize": obj.get("tickSize"),
            "lotSize": obj.get("lotSize"),
            "multiplier": obj.get("multiplier"),
            "gnGdBypnPd": obj.get("gnGdBypnPd"),
            "priceUnit": obj.get("priceUnit"),
            "priceQuoteQty": obj.get("priceQuoteQty"),
            "tradeUnit": obj.get("tradeUnit"),
            "deliveryUnit": obj.get("deliveryUnit"),
            "freezeQty": obj.get("freezeQty"),
            "additionalLongMgn": obj.get("additionalLongMgn"),
            "additionalShortMgn": obj.get("additionalShortMgn"),
            "exerciseStartDate": obj.get("exerciseStartDate"),
            "exerciseEndDate": obj.get("exerciseEndDate"),
            "tenderStartDate": obj.get("tenderStartDate"),
            "tenderEndDate": obj.get("tenderEndDate"),
            "elmBuyMgn": obj.get("elmBuyMgn"),
            "elmStartMgn": obj.get("elmStartMgn"),
            "specialLongMgn": obj.get("specialLongMgn"),
            "specialShortMgn": obj.get("specialShortMgn"),
            "contractToken": obj.get("contractToken")
        })
        return _obj


