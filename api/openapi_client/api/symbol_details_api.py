# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr

from openapi_client.models.iou_response_scrip_version_info import IouResponseScripVersionInfo

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SymbolDetailsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_symbol_details(
        self,
        scrip_group: Annotated[StrictStr, Field(description="Enter symbol name to download")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Scrip Master Data

        <ul><li>Get complete list of scrips based on the group passed in path.</li><li>This request accepts two types of response format : text/plain and application/json.</li><li><strong>text/plain</strong> : Normal plain string in csv format, rows separated with newline and columns separated with `,` (comma).</li><li><strong>application/json</strong>: List of scripts in a json array format. But usually slower than plain text format due to its larger size.</li></ul>

        :param scrip_group: Enter symbol name to download (required)
        :type scrip_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_symbol_details_serialize(
            scrip_group=scrip_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_symbol_details_with_http_info(
        self,
        scrip_group: Annotated[StrictStr, Field(description="Enter symbol name to download")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Scrip Master Data

        <ul><li>Get complete list of scrips based on the group passed in path.</li><li>This request accepts two types of response format : text/plain and application/json.</li><li><strong>text/plain</strong> : Normal plain string in csv format, rows separated with newline and columns separated with `,` (comma).</li><li><strong>application/json</strong>: List of scripts in a json array format. But usually slower than plain text format due to its larger size.</li></ul>

        :param scrip_group: Enter symbol name to download (required)
        :type scrip_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_symbol_details_serialize(
            scrip_group=scrip_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_symbol_details_without_preload_content(
        self,
        scrip_group: Annotated[StrictStr, Field(description="Enter symbol name to download")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Scrip Master Data

        <ul><li>Get complete list of scrips based on the group passed in path.</li><li>This request accepts two types of response format : text/plain and application/json.</li><li><strong>text/plain</strong> : Normal plain string in csv format, rows separated with newline and columns separated with `,` (comma).</li><li><strong>application/json</strong>: List of scripts in a json array format. But usually slower than plain text format due to its larger size.</li></ul>

        :param scrip_group: Enter symbol name to download (required)
        :type scrip_group: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_symbol_details_serialize(
            scrip_group=scrip_group,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_symbol_details_serialize(
        self,
        scrip_group,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if scrip_group is not None:
            _path_params['scripGroup'] = scrip_group
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/mkt-data/scrips/symbol-store/{scripGroup}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def version_details(
        self,
        version: Annotated[StrictInt, Field(description="Enter the version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IouResponseScripVersionInfo:
        """Scrip Master Groups

        <ul><li>This service can be used to fetch the scrip groups. It requires version number as input. </li><li>Version number is maintained to avoid fetching scrip master data multiple times a day, as  the scrip master data gets updated only once in a day during BOD ( Beginning of Day) process.</li><li>For initial or first api call, version can be passed as 'zero'. If the version number which is been passed in the query param is not matched with the server data version, isUpdated flag will be true and scrip groups data will be received in the response. </li><li>If the version matches with the server data version, isUpdated flag will be false and scrips groups data array would be empty.</li><li>By using the names in scrip master groups response, user can call Scrip Master Data API to get scrip list.</li><li>For effective usage of ScripMaster, users can persist version number, ScripMaster groups and data locally.</li><strong>idFormat Usage :</strong></br><li>Each scrip group has different symbol-id format. This format is mentioned in the `idFormat` key.</br>Eg: For Equity, the id format is instrument_symbol_series_exchange. </li><li>The user can decompose the symbol-id format by splitting with `_` (underscore) delimiter for identifying attributes of a symbol if required.</br>Eg: If user want to know the instrument and exchange of a symbol from Securities group, the 1st and 4th words can be extracted from symbol-id.</li><li>Note: On BOD (Beginning of Day) process, symbol store will be updated and the version will be incremented in the api server.</li></ul>

        :param version: Enter the version (required)
        :type version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._version_details_serialize(
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IouResponseScripVersionInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def version_details_with_http_info(
        self,
        version: Annotated[StrictInt, Field(description="Enter the version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IouResponseScripVersionInfo]:
        """Scrip Master Groups

        <ul><li>This service can be used to fetch the scrip groups. It requires version number as input. </li><li>Version number is maintained to avoid fetching scrip master data multiple times a day, as  the scrip master data gets updated only once in a day during BOD ( Beginning of Day) process.</li><li>For initial or first api call, version can be passed as 'zero'. If the version number which is been passed in the query param is not matched with the server data version, isUpdated flag will be true and scrip groups data will be received in the response. </li><li>If the version matches with the server data version, isUpdated flag will be false and scrips groups data array would be empty.</li><li>By using the names in scrip master groups response, user can call Scrip Master Data API to get scrip list.</li><li>For effective usage of ScripMaster, users can persist version number, ScripMaster groups and data locally.</li><strong>idFormat Usage :</strong></br><li>Each scrip group has different symbol-id format. This format is mentioned in the `idFormat` key.</br>Eg: For Equity, the id format is instrument_symbol_series_exchange. </li><li>The user can decompose the symbol-id format by splitting with `_` (underscore) delimiter for identifying attributes of a symbol if required.</br>Eg: If user want to know the instrument and exchange of a symbol from Securities group, the 1st and 4th words can be extracted from symbol-id.</li><li>Note: On BOD (Beginning of Day) process, symbol store will be updated and the version will be incremented in the api server.</li></ul>

        :param version: Enter the version (required)
        :type version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._version_details_serialize(
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IouResponseScripVersionInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def version_details_without_preload_content(
        self,
        version: Annotated[StrictInt, Field(description="Enter the version")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Scrip Master Groups

        <ul><li>This service can be used to fetch the scrip groups. It requires version number as input. </li><li>Version number is maintained to avoid fetching scrip master data multiple times a day, as  the scrip master data gets updated only once in a day during BOD ( Beginning of Day) process.</li><li>For initial or first api call, version can be passed as 'zero'. If the version number which is been passed in the query param is not matched with the server data version, isUpdated flag will be true and scrip groups data will be received in the response. </li><li>If the version matches with the server data version, isUpdated flag will be false and scrips groups data array would be empty.</li><li>By using the names in scrip master groups response, user can call Scrip Master Data API to get scrip list.</li><li>For effective usage of ScripMaster, users can persist version number, ScripMaster groups and data locally.</li><strong>idFormat Usage :</strong></br><li>Each scrip group has different symbol-id format. This format is mentioned in the `idFormat` key.</br>Eg: For Equity, the id format is instrument_symbol_series_exchange. </li><li>The user can decompose the symbol-id format by splitting with `_` (underscore) delimiter for identifying attributes of a symbol if required.</br>Eg: If user want to know the instrument and exchange of a symbol from Securities group, the 1st and 4th words can be extracted from symbol-id.</li><li>Note: On BOD (Beginning of Day) process, symbol store will be updated and the version will be incremented in the api server.</li></ul>

        :param version: Enter the version (required)
        :type version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._version_details_serialize(
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IouResponseScripVersionInfo",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _version_details_serialize(
        self,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/mkt-data/scrips/symbol-store',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


