# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr, field_validator

from openapi_client.models.get_interval_chart_data200_response import GetIntervalChartData200Response

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChartDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_interval_chart_data(
        self,
        var_from: Annotated[StrictInt, Field(description="Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100)")],
        to: Annotated[StrictInt, Field(description="Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354)")],
        interval: Annotated[StrictStr, Field(description="Enter time interval in minutes")],
        id: Annotated[StrictStr, Field(description="Enter Symbol id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetIntervalChartData200Response:
        """Interval Chart

        This service can be used to fetch the  open, high, low, close and volume values (chart data points) of a given symbol.</br>Also it provides sum up volume of last tick to calculate the current minute volume.</br>For derivative symbol, an additional field Open Interest Change for that particular minute will be added in same response array.

        :param var_from: Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100) (required)
        :type var_from: int
        :param to: Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354) (required)
        :type to: int
        :param interval: Enter time interval in minutes (required)
        :type interval: str
        :param id: Enter Symbol id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_interval_chart_data_serialize(
            var_from=var_from,
            to=to,
            interval=interval,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntervalChartData200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_interval_chart_data_with_http_info(
        self,
        var_from: Annotated[StrictInt, Field(description="Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100)")],
        to: Annotated[StrictInt, Field(description="Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354)")],
        interval: Annotated[StrictStr, Field(description="Enter time interval in minutes")],
        id: Annotated[StrictStr, Field(description="Enter Symbol id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetIntervalChartData200Response]:
        """Interval Chart

        This service can be used to fetch the  open, high, low, close and volume values (chart data points) of a given symbol.</br>Also it provides sum up volume of last tick to calculate the current minute volume.</br>For derivative symbol, an additional field Open Interest Change for that particular minute will be added in same response array.

        :param var_from: Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100) (required)
        :type var_from: int
        :param to: Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354) (required)
        :type to: int
        :param interval: Enter time interval in minutes (required)
        :type interval: str
        :param id: Enter Symbol id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_interval_chart_data_serialize(
            var_from=var_from,
            to=to,
            interval=interval,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntervalChartData200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_interval_chart_data_without_preload_content(
        self,
        var_from: Annotated[StrictInt, Field(description="Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100)")],
        to: Annotated[StrictInt, Field(description="Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354)")],
        interval: Annotated[StrictStr, Field(description="Enter time interval in minutes")],
        id: Annotated[StrictStr, Field(description="Enter Symbol id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Interval Chart

        This service can be used to fetch the  open, high, low, close and volume values (chart data points) of a given symbol.</br>Also it provides sum up volume of last tick to calculate the current minute volume.</br>For derivative symbol, an additional field Open Interest Change for that particular minute will be added in same response array.

        :param var_from: Enter starting datetime(eg: 2023-06-01 9:15:00 ) in timestamp(eg: 1685591100) (required)
        :type var_from: int
        :param to: Enter ending datetime(eg: 2023-06-01 13:12:34) in timestamp(eg: 1685605354) (required)
        :type to: int
        :param interval: Enter time interval in minutes (required)
        :type interval: str
        :param id: Enter Symbol id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_interval_chart_data_serialize(
            var_from=var_from,
            to=to,
            interval=interval,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetIntervalChartData200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_interval_chart_data_serialize(
        self,
        var_from,
        to,
        interval,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if interval is not None:
            
            _query_params.append(('interval', interval))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'http_bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/mkt-data/chart/interval-data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


