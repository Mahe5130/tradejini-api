# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LimitData(BaseModel):
    """
    LimitData
    """ # noqa: E501
    total_credits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total credits is sum of availableCash, payIn, , adHocMargin, unclearedCash, brokerCollateralAmt,stockCollateral and auxCollateral", alias="totalCredits")
    avail_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available margin is calculated by ( totalcredits - marginused )", alias="availMargin")
    brokerage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Brokerage amount")
    avail_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Cash Margin available", alias="availCash")
    peak_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Peak margin used by the user", alias="peakMargin")
    pay_in: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total Amount transferred using Payin's today", alias="payIn")
    span: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Span used")
    realized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current realized PnL", alias="realizedPnl")
    unrealized_pn_l: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unrealized PnL", alias="unrealizedPnL")
    exposure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Exposure margin")
    ad_hoc_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Additional leverage amount or the amount added to handle system errors - by broker.", alias="adHocMargin")
    stock_collateral: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Collateral amount calculated based on uploaded holdings", alias="stockCollateral")
    option_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Derivative Margin", alias="optionPremium")
    segment: Optional[StrictStr] = Field(default=None, description="Segment")
    pay_out: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount requested for withdrawal today", alias="payOut")
    brk_collat_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Broker Collateral Amount", alias="brkCollatAmount")
    uncleared_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Uncleared Cash", alias="unclearedCash")
    aux_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Aux day Cash", alias="auxCash")
    aux_collat_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="auxCollatAmount")
    aux_uncleared_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="auxUnclearedCash")
    day_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Additional leverage amount or the amount added to handle system errors - by broker.", alias="dayCash")
    turn_over_lmt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="turnOverLmt")
    pend_ord_val_lmt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="pendOrdValLmt")
    turnover: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Turnover")
    pend_ord_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pending Order value", alias="pendOrdValue")
    margin_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total margin or total fund used today", alias="marginUsed")
    premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Premium used")
    brokerage_derivatives_bo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Brokerage Derivative Bracket Order", alias="brokerageDerivativesBO")
    brokerage_derivatives_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Brokerage Derivative Margin", alias="brokerageDerivativesMargin")
    opt_premium_der_marg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Option premium Derivative Margin", alias="optPremiumDerMarg")
    __properties: ClassVar[List[str]] = ["totalCredits", "availMargin", "brokerage", "availCash", "peakMargin", "payIn", "span", "realizedPnl", "unrealizedPnL", "exposure", "adHocMargin", "stockCollateral", "optionPremium", "segment", "payOut", "brkCollatAmount", "unclearedCash", "auxCash", "auxCollatAmount", "auxUnclearedCash", "dayCash", "turnOverLmt", "pendOrdValLmt", "turnover", "pendOrdValue", "marginUsed", "premium", "brokerageDerivativesBO", "brokerageDerivativesMargin", "optPremiumDerMarg"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LimitData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LimitData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalCredits": obj.get("totalCredits"),
            "availMargin": obj.get("availMargin"),
            "brokerage": obj.get("brokerage"),
            "availCash": obj.get("availCash"),
            "peakMargin": obj.get("peakMargin"),
            "payIn": obj.get("payIn"),
            "span": obj.get("span"),
            "realizedPnl": obj.get("realizedPnl"),
            "unrealizedPnL": obj.get("unrealizedPnL"),
            "exposure": obj.get("exposure"),
            "adHocMargin": obj.get("adHocMargin"),
            "stockCollateral": obj.get("stockCollateral"),
            "optionPremium": obj.get("optionPremium"),
            "segment": obj.get("segment"),
            "payOut": obj.get("payOut"),
            "brkCollatAmount": obj.get("brkCollatAmount"),
            "unclearedCash": obj.get("unclearedCash"),
            "auxCash": obj.get("auxCash"),
            "auxCollatAmount": obj.get("auxCollatAmount"),
            "auxUnclearedCash": obj.get("auxUnclearedCash"),
            "dayCash": obj.get("dayCash"),
            "turnOverLmt": obj.get("turnOverLmt"),
            "pendOrdValLmt": obj.get("pendOrdValLmt"),
            "turnover": obj.get("turnover"),
            "pendOrdValue": obj.get("pendOrdValue"),
            "marginUsed": obj.get("marginUsed"),
            "premium": obj.get("premium"),
            "brokerageDerivativesBO": obj.get("brokerageDerivativesBO"),
            "brokerageDerivativesMargin": obj.get("brokerageDerivativesMargin"),
            "optPremiumDerMarg": obj.get("optPremiumDerMarg")
        })
        return _obj


