# coding: utf-8

"""
    CubePlus Rest API Specifications

    Gateway API's

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.trade_record_sym import TradeRecordSym
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Holdings(BaseModel):
    """
    Holdings
    """ # noqa: E501
    sym_id: Optional[StrictStr] = Field(default=None, alias="symId")
    sym: Optional[TradeRecordSym] = None
    qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity is sum of ( btstQuantity, holdingQuantity, brokerQuantity, unPledgedQty, beneficiaryQuantity, MaxOf(nonPoaQuantity,dpQuantity)) minus tradedQuantity")
    avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average buy price", alias="avgPrice")
    t1_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="T1 or BTST quantity", alias="t1Qty")
    saleable_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Saleable quantity is sum of ( btstQuantity, holdingQuantity, unPledgedQty, beneficiaryQuantity, dpQuantity ) minus tradedQty", alias="saleableQty")
    pledge_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Collateral or pledged quantity", alias="pledgeQty")
    non_poa_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Non POA quantity", alias="nonPoaQty")
    dp_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DP holding quantity", alias="dpQty")
    ben_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Beneficiary quantity", alias="benQty")
    unpledged_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unpledged quantity", alias="unpledgedQty")
    broker_col_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Broker collateral", alias="brokerColQty")
    btst_colqty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="BTST collateral quantity", alias="btstColqty")
    used_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Holding quantity used today", alias="usedQty")
    traded_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Holding quantity traded today", alias="tradedQty")
    realized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="'realizedPnL  ", alias="realizedPnl")
    total_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalQty")
    trans_history: Optional[StrictBool] = Field(default=None, alias="transHistory")
    __properties: ClassVar[List[str]] = ["symId", "sym", "qty", "avgPrice", "t1Qty", "saleableQty", "pledgeQty", "nonPoaQty", "dpQty", "benQty", "unpledgedQty", "brokerColQty", "btstColqty", "usedQty", "tradedQty", "realizedPnl", "totalQty", "transHistory"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Holdings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sym
        if self.sym:
            _dict['sym'] = self.sym.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Holdings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symId": obj.get("symId"),
            "sym": TradeRecordSym.from_dict(obj.get("sym")) if obj.get("sym") is not None else None,
            "qty": obj.get("qty"),
            "avgPrice": obj.get("avgPrice"),
            "t1Qty": obj.get("t1Qty"),
            "saleableQty": obj.get("saleableQty"),
            "pledgeQty": obj.get("pledgeQty"),
            "nonPoaQty": obj.get("nonPoaQty"),
            "dpQty": obj.get("dpQty"),
            "benQty": obj.get("benQty"),
            "unpledgedQty": obj.get("unpledgedQty"),
            "brokerColQty": obj.get("brokerColQty"),
            "btstColqty": obj.get("btstColqty"),
            "usedQty": obj.get("usedQty"),
            "tradedQty": obj.get("tradedQty"),
            "realizedPnl": obj.get("realizedPnl"),
            "totalQty": obj.get("totalQty"),
            "transHistory": obj.get("transHistory")
        })
        return _obj


